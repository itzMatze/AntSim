#version 460

#extension GL_GOOGLE_include_directive: require
#include "uniform_buffer_struct.glsl"
#include "ants_struct.glsl"
#include "hash_grid_struct.glsl"
#include "random.glsl"

layout(constant_id = 0) const uint ANT_COUNT = 1;
layout(constant_id = 1) const uint HASH_GRID_CAPACITY = 1;

layout(binding = 0) buffer AntBuffer {
	Ant ants[];
};

layout(binding = 1) buffer HashGridBuffer {
	HashGridCell hash_grid[];
};

layout(binding = 99) uniform UniformBuffer {
	UniformBufferData ub;
};

#include "ants_functions.glsl"
#define HASH_GRID_ENABLE_WRITE
#include "hash_grid_functions.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

bool time_step_passed(float time_step_length)
{
	// randomly shift time for each ant to decorrelate the ants behavior
	const float total_time_shifted = ub.total_time + float(gl_GlobalInvocationID.x) / (0.271 * float(ANT_COUNT));
	uint prev_steps_passed = uint((total_time_shifted - ub.frame_time) / time_step_length);
	uint steps_passed = uint(total_time_shifted / time_step_length);
	return steps_passed != prev_steps_passed;
}

bool time_step_probability(float time_step_length, float probability)
{
	return time_step_passed(time_step_length) && (random_float_state() < probability);
}

void main()
{
	uint thread_id = gl_GlobalInvocationID.x;
	if (!is_valid_ant(thread_id)) return;
	rng_state = (thread_id + ANT_COUNT * ub.frame_idx + 43598763);
	Ant ant = ants[thread_id];
	ivec2 hash_grid_position = get_hash_grid_pos(ant.pos);
	bool success = false;
	for (int i = 0; i < 32 && !success; i++)
	{
		int hash_grid_index = try_acquire_hash_grid_cell_index(hash_grid_position);
		if (hash_grid_index >= 0)
		{
			success = true;
			HashGridCell cell = hash_grid[hash_grid_index];
			uint new_state_bits = cell.state_bits;
			float emit_pheromone_probability = min(ant.pheromone_emit_scale / 10.0, 0.8);
			if ((ant.state_bits & ANT_HAS_FOOD) == 0)
			{
				// increase pheromone emit scale if currently seeing different pheromone and reset if own pheromone was found
				if ((new_state_bits & HASH_GRID_NEST_PHEROMONE) != 0 && time_step_probability(0.2, 0.5)) ant.pheromone_emit_scale = 1.0;
				else if (time_step_probability(0.2, 0.5)) ant.pheromone_emit_scale += 1.0;
				new_state_bits |= HASH_GRID_NEST_PHEROMONE;
				new_state_bits &= ~HASH_GRID_FOOD_PHEROMONE;
				if (cell.food_amount > 0)
				{
					cell.food_amount--;
					ant.state_bits |= ANT_HAS_FOOD;
					ant.state_bits &= ~ANT_TARGET_PRIORITY_MASK;
					ant.distance_to_poi = 0.0;
					ant.pheromone_emit_scale = 2.0;
				}
			}
			else
			{
				// increase pheromone emit scale if currently seeing different pheromone and reset if own pheromone was found
				if ((new_state_bits & HASH_GRID_FOOD_PHEROMONE) != 0 && time_step_probability(0.5, 0.4)) ant.pheromone_emit_scale = 1.0;
				else if (time_step_probability(0.5, 0.5)) ant.pheromone_emit_scale += 1.0;
				new_state_bits |= HASH_GRID_FOOD_PHEROMONE;
				new_state_bits &= ~HASH_GRID_NEST_PHEROMONE;
			}
			if (time_step_probability(0.4, emit_pheromone_probability))
			{
				cell.state_bits = new_state_bits;
				cell.pheromone_lifetime = 0.0;
				cell.pheromone_distance = ant.distance_to_poi;
			}
			hash_grid[hash_grid_index] = cell;
			unlock_hash_grid_cell(hash_grid_index);
		}
	}
	ants[thread_id] = ant;
}

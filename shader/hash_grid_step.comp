#version 460

#extension GL_GOOGLE_include_directive: require
#include "hash_grid_struct.glsl"

layout(constant_id = 0) const uint HASH_GRID_CAPACITY = 1;

layout(binding = 0) buffer HashGridBuffer {
	HashGridCell hash_grid[];
};

#include "hash_grid_functions.glsl"

struct PushConstants
{
	vec2 food_pos;
	uint food_amount;
	uint frame_idx;
	float frame_time;
	float total_time;
};

layout(push_constant) uniform PushConstant { PushConstants pc; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

void main()
{
	const uint id = gl_GlobalInvocationID.x;
	if (!is_valid_hash_grid(id)) return;
	const uint food_slot = get_hash_grid_slot(get_hash_grid_pos(pc.food_pos));
	if (id == food_slot && pc.food_amount > 0)
	{
		hash_grid[food_slot].food_amount = pc.food_amount;
	}
	const bool cell_inactive = hash_grid[id].food_amount == 0 && hash_grid[id].distance_to_nest_age <= 0.0 && hash_grid[id].distance_to_food_age <= 0.0;
	if (cell_inactive) hash_grid[id].active_flags = 0u;
	else
	{
		hash_grid[id].active_flags &= ~HASH_GRID_LOCKED;
		hash_grid[id].distance_to_nest_age -= pc.frame_time;
		hash_grid[id].distance_to_food_age -= pc.frame_time;
	}
}

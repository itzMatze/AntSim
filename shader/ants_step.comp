#version 460

#extension GL_GOOGLE_include_directive: require
#include "ants_struct.glsl"
#include "hash_grid_struct.glsl"
#include "random.glsl"

layout(constant_id = 0) const uint ANT_COUNT = 1;
layout(constant_id = 1) const uint HASH_GRID_CAPACITY = 1;

layout(binding = 0) buffer AntBuffer {
	Ant ants[];
};

layout(binding = 1) buffer HashGridBuffer {
	HashGridCell hash_grid[];
};

layout(binding = 2) readonly buffer NestBuffer {
	Nest nest;
};

#include "ants_functions.glsl"
#include "hash_grid_functions.glsl"

struct PushConstants
{
	uint frame_idx;
	float frame_time;
	float total_time;
	float pheromone_lifetime;
};

layout(push_constant) uniform PushConstant { PushConstants pc; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

const float ant_speed = 0.2;

void main()
{
	uint thread_id = gl_GlobalInvocationID.x;
	if (!is_valid_ant(thread_id)) return;
	rng_state = (thread_id + ANT_COUNT * pc.frame_idx);
	Ant ant = ants[thread_id];
	ivec2 hash_grid_position = get_hash_grid_pos(ant.pos);
	int hash_grid_index = try_acquire_hash_grid_cell_index(hash_grid_position);
	if (hash_grid_index >= 0)
	{
		HashGridCell cell = hash_grid[hash_grid_index];
		if (distance(ant.pos, nest.pos) < nest.radius)
		{
			cell.distance_to_nest = 0.0;
			cell.distance_to_nest_age = pc.pheromone_lifetime;
			ant.distance_to_poi = 0.0;
		}
		else
		{
			if ((cell.active_flags & HASH_GRID_DIST_TO_NEST_ACTIVE) != 0 && cell.distance_to_nest < ant.distance_to_poi - 2.0 * HASH_GRID_CELL_LENGTH)
			{
				ant.distance_to_poi = hash_grid[hash_grid_index].distance_to_nest;
			}
			else
			{
				cell.distance_to_nest = ant.distance_to_poi;
				cell.distance_to_nest_age = pc.pheromone_lifetime;
				cell.active_flags |= HASH_GRID_DIST_TO_NEST_ACTIVE;
			}
		}
		hash_grid[hash_grid_index] = cell;
	}
	// sample a new direction if ant has none or if some amount of time passed with some probability
	const float time_to_new_step = 0.1;
	uint prev_steps_passed = uint((pc.total_time - pc.frame_time) / time_to_new_step);
	uint steps_passed = uint(pc.total_time / time_to_new_step);
	const bool sample_new_direction = dot(ant.dir, ant.dir) == 0.0 || ((steps_passed != prev_steps_passed) && (pcg_random_state() < 0.01));
	if (sample_new_direction) ant.dir = vec2(pcg_random_state(-1.0, 1.0), pcg_random_state(-1.0, 1.0));
	ant.dir += vec2(pcg_random_state(-0.01, 0.01), pcg_random_state(-0.01, 0.01));
	ant.dir = normalize(ant.dir) * ant_speed;
	ant.pos += ant.dir * pc.frame_time;
	ant.distance_to_poi += ant_speed * pc.frame_time;
	if (ant.pos.x > 100.0)
	{
		ant.pos.x = 100.0;
		ant.dir.x = -ant.dir.x * 0.1;
	}
	if (ant.pos.x < -100.0)
	{
		ant.pos.x = -100.0;
		ant.dir.x = -ant.dir.x * 0.1;
	}
	if (ant.pos.y > 100.0)
	{
		ant.pos.y = 100.0;
		ant.dir.y = -ant.dir.y * 0.1;
	}
	if (ant.pos.y < -100.0)
	{
		ant.pos.y = -100.0;
		ant.dir.y = -ant.dir.y * 0.1;
	}
	ants[thread_id] = ant;
}

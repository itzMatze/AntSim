#version 460

#extension GL_GOOGLE_include_directive: require
#include "ants_struct.glsl"
#include "hash_grid_struct.glsl"
#include "nest_struct.glsl"
#include "nest_functions.glsl"
#include "random.glsl"
#include "math.glsl"

layout(constant_id = 0) const uint ANT_COUNT = 1;
layout(constant_id = 1) const uint HASH_GRID_CAPACITY = 1;

layout(binding = 0) buffer AntBuffer {
	Ant ants[];
};

layout(binding = 1) readonly buffer HashGridBuffer {
	HashGridCell hash_grid[];
};

layout(binding = 2) buffer NestBuffer {
	Nest nest;
};

#define ANTS_ENABLE_WRITE
#include "ants_functions.glsl"
#include "hash_grid_functions.glsl"

struct PushConstants
{
	uint frame_idx;
	float frame_time;
	float total_time;
};

layout(push_constant) uniform PushConstant { PushConstants pc; };

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

const float ant_speed = 0.2;
const float ant_search_radius = 0.2;

bool time_step_passed(float time_step_length)
{
	// randomly shift time for each ant to decorrelate the ants behavior
	const float total_time_shifted = pc.total_time + float(gl_GlobalInvocationID.x) / (0.7982 * float(ANT_COUNT));
	uint prev_steps_passed = uint((total_time_shifted - pc.frame_time) / time_step_length);
	uint steps_passed = uint(total_time_shifted / time_step_length);
	return steps_passed != prev_steps_passed;
}

bool time_step_probability(float time_step_length, float probability)
{
	return time_step_passed(time_step_length) && (random_float_state() < probability);
}

void main()
{
	uint thread_id = gl_GlobalInvocationID.x;
	if (!is_valid_ant(thread_id)) return;
	rng_state = (thread_id + ANT_COUNT * pc.frame_idx + 27349843);
	Ant ant = ants[thread_id];
	// sample a new target if some amount of time passed with some probability
	if (time_step_probability(0.1, 0.05)) ant.state_bits &= ~ANT_TARGET_PRIORITY_MASK;

	ivec2 ant_hash_grid_position = get_hash_grid_pos(ant.pos);
	const int cell_radius = int(ant_search_radius / HASH_GRID_CELL_LENGTH);
	int target_cell_index = -1;
	float closest_to_dst = FLT_MAX;
	uint min_target_priority = ant.state_bits & ANT_TARGET_PRIORITY_MASK;
	uint new_target_priority;
	// randomly sample 25% of the search area (cells might be sampled more than once; So, it's not necessarily 25%)
	for (int i = 0; i < cell_radius * cell_radius; i++)
	{
		int x = random_int_state(-cell_radius, cell_radius);
		int y = random_int_state(-cell_radius, cell_radius);
		// skip the cell in which the ant currently is
		if (x == 0 && y == 0) continue;
		ivec2 hash_grid_position = ant_hash_grid_position + ivec2(x, y);
		int hash_grid_index = get_hash_grid_cell_index_const(hash_grid_position);
		if (hash_grid_index < 0) continue;
		const HashGridCell cell = hash_grid[hash_grid_index];
		// move ant towards food if it doesn't carry any yet
		if ((ant.state_bits & ANT_HAS_FOOD) == 0)
		{
			if (cell.food_amount > 0 && time_step_probability(0.1, 0.95) && min_target_priority < ANT_TARGET_FOOD_NEST_PRIORITY)
			{
				target_cell_index = hash_grid_index;
				closest_to_dst = 0;
				min_target_priority = ANT_TARGET_FOOD_NEST_PRIORITY - 1;
				new_target_priority = ANT_TARGET_FOOD_NEST_PRIORITY;
			}
			else if ((cell.state_bits & HASH_GRID_FOOD_PHEROMONE) != 0 && closest_to_dst > cell.pheromone_distance && (min_target_priority < ANT_TARGET_PHEROMONE_PRIORITY))
			{
				target_cell_index = hash_grid_index;
				closest_to_dst = cell.pheromone_distance;
				min_target_priority = ANT_TARGET_PHEROMONE_PRIORITY - 1;
				new_target_priority = ANT_TARGET_PHEROMONE_PRIORITY;
			}
		}
		else
		{
			float nest_distance = distance(get_hash_grid_pos(cell.index), nest.pos);
			if (nest_distance < get_nest_radius(nest.level) && min_target_priority < ANT_TARGET_FOOD_NEST_PRIORITY)
			{
				target_cell_index = hash_grid_index;
				closest_to_dst = nest_distance;
				min_target_priority = ANT_TARGET_FOOD_NEST_PRIORITY - 1;
				new_target_priority = ANT_TARGET_FOOD_NEST_PRIORITY;
			}
			else if ((cell.state_bits & HASH_GRID_NEST_PHEROMONE) != 0 && closest_to_dst > cell.pheromone_distance && (min_target_priority < ANT_TARGET_PHEROMONE_PRIORITY))
			{
				target_cell_index = hash_grid_index;
				closest_to_dst = cell.pheromone_distance;
				min_target_priority = ANT_TARGET_PHEROMONE_PRIORITY - 1;
				new_target_priority = ANT_TARGET_PHEROMONE_PRIORITY;
			}
		}
	}
	if (target_cell_index >= 0)
	{
		ant_set_target_priority(ant.state_bits, new_target_priority);
		ant.target = get_hash_grid_cell_pos(hash_grid[target_cell_index].index);
	}

	// sample new target if ant has none
	if ((ant.state_bits & ANT_TARGET_PRIORITY_MASK) == 0u)
	{
		ant.target = ant.pos + vec2(random_float_state(-ant_search_radius, ant_search_radius), random_float_state(-ant_search_radius, ant_search_radius));
		ant_set_target_priority(ant.state_bits, ANT_TARGET_NO_PRIORITY);
	}
	// pick new target in move direction of ant if it has reached its previous target
	if (distance(ant.pos, ant.target) < (HASH_GRID_CELL_LENGTH / 2.0))
	{
		const float max_angle = radians(10.0);
		const float angle = random_float_state(-max_angle, max_angle);
		const vec2 norm_ant_dir = normalize(ant.dir);
		const vec2 dir = vec2(norm_ant_dir.x * cos(angle) - norm_ant_dir.y * sin(angle), norm_ant_dir.x * sin(angle) + norm_ant_dir.y * cos(angle));
		const float dist = random_float_state(ant_search_radius / 2.0, ant_search_radius);
		ant.target = ant.pos + dir * dist;
		ant_set_target_priority(ant.state_bits, ANT_TARGET_NO_PRIORITY);
	}
	ant.dir = ant.target - ant.pos;
	ant.dir += vec2(random_float_state(-0.01, 0.01), random_float_state(-0.01, 0.01));

	ant.dir = normalize(ant.dir) * ant_speed;
	ant.pos += ant.dir * pc.frame_time;
	ant.distance_to_poi += ant_speed * pc.frame_time;

	// prevent ants from running too far away
	if (ant.pos.x > 100.0)
	{
		ant.pos.x = 100.0;
		ant.dir.x = -ant.dir.x * 0.1;
	}
	if (ant.pos.x < -100.0)
	{
		ant.pos.x = -100.0;
		ant.dir.x = -ant.dir.x * 0.1;
	}
	if (ant.pos.y > 100.0)
	{
		ant.pos.y = 100.0;
		ant.dir.y = -ant.dir.y * 0.1;
	}
	if (ant.pos.y < -100.0)
	{
		ant.pos.y = -100.0;
		ant.dir.y = -ant.dir.y * 0.1;
	}

	ivec2 hash_grid_position = get_hash_grid_pos(ant.pos);
	int hash_grid_index = get_hash_grid_cell_index_const(hash_grid_position);
	if (hash_grid_index >= 0)
	{
		const HashGridCell cell = hash_grid[hash_grid_index];
		float ant_nest_distance = distance(ant.pos, nest.pos);
		if (ant_nest_distance < get_nest_radius(nest.level))
		{
			ant.distance_to_poi = ant_nest_distance;
			if ((ant.state_bits & ANT_HAS_FOOD) != 0)
			{
				ant.state_bits &= ~ANT_HAS_FOOD;
				ant.state_bits &= ~ANT_TARGET_PRIORITY_MASK;
				uint old_food_amount = atomicAdd(nest.food_amount, 1);
				if (old_food_amount == get_nest_next_level_food_amount(nest.level)) atomicAdd(nest.level, 1);
			}
		}
		else
		{
			const bool pheromone_match = (ant.state_bits & ANT_HAS_FOOD) == 0 && (cell.state_bits & HASH_GRID_NEST_PHEROMONE) != 0 || (ant.state_bits & ANT_HAS_FOOD) != 0 && (cell.state_bits & HASH_GRID_FOOD_PHEROMONE) != 0;
			const bool update_ant_distance = pheromone_match && (cell.pheromone_distance < ant.distance_to_poi - 2.0 * HASH_GRID_CELL_LENGTH);
			if (update_ant_distance) ant.distance_to_poi = hash_grid[hash_grid_index].pheromone_distance;
		}
	}
	ants[thread_id] = ant;
}
